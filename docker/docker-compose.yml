services:
  database:
    image: myBank/database-postgres-image
    ports:
      - "5432:5432"
    environment:
      POSTGRES_USER: "postgres"
      POSTGRES_PASSWORD: "root"
      POSTGRES_DB: "bank-dev"
    networks:
      - backend
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  configserver:
    image: myBank/configserver-image
    ports:
      - "8081:8081"
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8081/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - backend
  
  keycloak:
    image: quay.io/keycloak/keycloak:11.0.3
    restart: always
    environment:
      KEYCLOAK_FRONTEND_URL: http://keycloak:8080/auth
      PROXY_ADDRESS_FORWARDING: "true"
      KEYCLOAK_USER: admin
      KEYCLOAK_PASSWORD: admin
      DB_VENDOR: postgres
      DB_ADDR: postgres
      DB_DATABASE: keycloak
      DB_USER: keycloak
      DB_PASSWORD: keycloak
      TZ: Europe/Paris
    ports:
      - "8080:8080"
    depends_on:
      - postgres
    networks:
      backend:
        aliases:
          - keycloak
    volumes:
      - keycloak_data:/opt/jboss/keycloak/standalone/data

  postgres:
    image: postgres:12
    restart: always
    environment:
      POSTGRES_DB: keycloak
      POSTGRES_USER: keycloak
      POSTGRES_PASSWORD: keycloak
    networks:
      - backend
    volumes:
      - postgres_data:/var/lib/postgresql/data
  

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:7.7.0
    container_name: elasticsearch
    environment:
      - node.name=elasticsearch
      - discovery.type=single-node
      - cluster.name=docker-cluster
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - esdata1:/usr/share/elasticsearch/data
    healthcheck:
      test: ["CMD-SHELL", "curl -s http://localhost:9200 >/dev/null || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3      
    ports:
      - 9300:9300
      - 9200:9200
    networks:
      backend:
        aliases:
          - "elasticsearch"
          
  kibana:
    image: docker.elastic.co/kibana/kibana:7.7.0
    container_name: kibana
    environment:
      ELASTICSEARCH_URL: "http://elasticsearch:9300"
    ports:
      - 5601:5601
    networks:
      backend:
        aliases:
          - "kibana"
          
  logstash:
    image: docker.elastic.co/logstash/logstash:7.7.0
    container_name: logstash
    command: logstash -f /etc/logstash/conf.d/logstash.conf
    volumes:
      - ./config:/etc/logstash/conf.d
    ports:
      - "5000:5000"
    networks:
      backend:
        aliases:
          - "logstash"
    depends_on:
      elasticsearch:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9600"]
      interval: 30s
      timeout: 10s
      retries: 5    
 

  zipkin: 
    image: openzipkin/zipkin 
    container_name: zipkin
    depends_on: 
      elasticsearch:
        condition: service_healthy      
    environment: 
      - STORAGE_TYPE=elasticsearch
      - "ES_HOSTS=elasticsearch:9300"
      
    ports:
      - "9411:9411"
    networks:
      backend:
        aliases:
          - "zipkin"  
      
  eurekaserver:
    image: myBank/eurekaserver-image
    ports:
      - "8082:8082"
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8082/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5                     
    networks:
      - backend   


  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181:2181"
    healthcheck:
      test: ["CMD-SHELL", "nc -z localhost 2181 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5  
    networks:
      backend:
        aliases:
          - "zookeeper"
      
  kafka:
    image: wurstmeister/kafka
    ports:
      - "9092:9092"
    environment:
        - KAFKA_ADVERTISED_HOST_NAME=kafka
        - KAFKA_ADVERTISED_PORT=9092
        - KAFKA_ZOOKEEPER_CONNECT=zookeeper:2181
        - KAFKA_CREATE_TOPICS=transaction-updates:1:1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --list --bootstrap-server localhost:9092 || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3  
    depends_on:
      - zookeeper      
    networks:
      backend:
        aliases:
          - "kafka"



  gatewayserver:
    image: myBank/gatewayserver-image
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=default
      - CONFIGSERVER_URI=http://configserver:8081
      - CONFIGSERVER_PORT=8081
      - DATABASESERVER_PORT=5432        
      - EUREKASERVER_PORT = 8082
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy
      logstash:
        condition: service_healthy  
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8083/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5          
    networks:
      - backend      

  accountservice:
    image: myBank/accountservice-image
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - CONFIGSERVER_URI=http://configserver:8081
      - CONFIGSERVER_PORT=8081
      - DATABASESERVER_PORT=5432
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy    
      kafka:
        condition: service_healthy
      logstash:
        condition: service_healthy    
        
    ports:
      - "8072:8072"
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8072/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5


  customerservice:
    image: myBank/customerservice-image
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - CONFIGSERVER_URI=http://configserver:8081
      - CONFIGSERVER_PORT=8081
      - DATABASESERVER_PORT=5432
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy 
      logstash:
        condition: service_healthy        
    ports:
      - "8071:8071"  
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8071/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5  


  transactionservice:
    image: myBank/transactionservice-image
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - CONFIGSERVER_URI=http://configserver:8081
      - CONFIGSERVER_PORT=8081
      - DATABASESERVER_PORT=5432
      - INSTANCE_ID=transaction1
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy   
      kafka:
        condition: service_healthy  
      logstash:
        condition: service_healthy        
    ports:
      - "8073:8073"  
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8073/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5   

  transactionservice2:
    image: myBank/transactionservice-image
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - CONFIGSERVER_URI=http://configserver:8081
      - CONFIGSERVER_PORT=8081
      - DATABASESERVER_PORT=5432
      - INSTANCE_ID=transaction2
    depends_on:
      database:
        condition: service_healthy
      configserver:
        condition: service_healthy
      eurekaserver:
        condition: service_healthy 
      kafka:
        condition: service_healthy   
      logstash:
        condition: service_healthy        
    ports:
      - "8074:8073"  
    networks:
      - backend
    healthcheck:
      test: ["CMD-SHELL", "curl -f http://localhost:8073/actuator/health || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 5         
      
volumes:
  keycloak_data:
  postgres_data:
  db-data:
  esdata1:
    driver: local

networks:
  backend:
    driver: bridge
